# -*- coding: utf-8 -*-
"""Problem_C3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GY8b7g2VS4D9g1jtnjPDmgtayneLZAlo
"""

!pip install tensorflow
!pip install keras
!pip install keras-preprocessing

import tensorflow as tf
import urllib.request
import zipfile
import tensorflow as tf
import os
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

class MyCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        if logs.get('accuracy') > 0.72 and logs.get('val_accuracy') > 0.72:
            print('\n Training is done, criteria is filled')
            self.model.stop_training = True


def solution_C3():
    data_url = 'https://github.com/dicodingacademy/assets/raw/main/Simulation/machine_learning/cats_and_dogs.zip'
    urllib.request.urlretrieve(data_url, 'cats_and_dogs.zip')
    local_file = 'cats_and_dogs.zip'
    zip_ref = zipfile.ZipFile(local_file, 'r')
    zip_ref.extractall('data/')
    zip_ref.close()

    BASE_DIR = 'data/cats_and_dogs_filtered'
    train_dir = os.path.join(BASE_DIR, 'train')
    validation_dir = os.path.join(BASE_DIR, 'validation')

    train_datagen =  ImageDataGenerator(rescale=1.0/255) # YOUR CODE HERE

    # YOUR IMAGE SIZE SHOULD BE 150x150
    # Make sure you used "binary"
    train_generator = train_datagen.flow_from_directory(directory=train_dir,
                                                         batch_size=32,
                                                         class_mode='binary',
                                                         target_size=(150, 150)) # YOUR CODE HERE

    val_datagen = ImageDataGenerator(rescale=1.0/255)

    validation_generator = val_datagen.flow_from_directory(directory=validation_dir,
                                                           batch_size=32,
                                                           class_mode='binary',
                                                           target_size=(150, 150))
    #sequential
    model = tf.keras.models.Sequential([
        # YOUR CODE HERE, end with a Neuron Dense, activated by 'sigmoid'
        tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),
        tf.keras.layers.MaxPooling2D(2, 2),

        tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2, 2),

        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2, 2),

        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(512, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])

    #callback
    callback = MyCallback()
    #compiling
    model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001),
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    #fitting and checking
    model.fit(train_generator,
              epochs=10,
              verbose=1,
              validation_data=validation_generator,
              callbacks=callback)

    return model


# The code below is to save your model as a .h5 file.
# It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model = solution_C3()
    model.save("model_C3.h5")