# -*- coding: utf-8 -*-
"""Problem_B2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11njItJpFwJ8kXAePXsI4v9zBfZpbZsuw
"""

!pip install tensorflow
!pip install keras
!pip install keras-preprocessing

import tensorflow as tf

class MyCallback(tf.keras.callbacks.Callback):
      def on_epoch_end(self, epoch, logs=None):
        if(logs.get('accuracy')>0.84 and logs.get('val_accuracy')>0.84):
          print('\n Training is done, criteria is filled')
          self.model.stop_training = True

def solution_B2():
    fashion_mnist = tf.keras.datasets.fashion_mnist

    # NORMALIZE YOUR IMAGE HERE
    (train_image, train_label), (test_image, test_label) = fashion_mnist.load_data()
    train_image=train_image/255
    test_image=test_image/255
    # DEFINE YOUR MODEL HERE
    #Modelling
    model = tf.keras.models.Sequential([
        tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dense(10, activation='softmax')
    ])
    # End with 10 Neuron Dense, activated by softmax
    # COMPILE MODEL HERE
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    #callback
    my_callback = MyCallback()
    # TRAIN YOUR MODEL HERE
    model.fit(train_image, train_label, validation_data=(test_image, test_label), epochs=10, verbose=1,callbacks=my_callback)
    return model


# The code below is to save your model as a .h5 file.
# It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model = solution_B2()
    model.save("model_B2.h5")