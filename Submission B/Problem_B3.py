# -*- coding: utf-8 -*-
"""Problem_B3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l3blcTBe85DZZh55dyZMvOK5a8HURnMQ
"""

!pip install tensorflow
!pip install keras
!pip install keras-preprocessing
!pip install split-folders

import urllib.request
import zipfile
import tensorflow as tf
import os
from keras_preprocessing.image import ImageDataGenerator
import splitfolders

class MyCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        if logs.get('accuracy') > 0.83 and logs.get('val_accuracy') > 0.83:
            print('\n Training is done, criteria is filled')
            self.model.stop_training = True


def solution_B3():
    data_url = 'https://github.com/dicodingacademy/assets/releases/download/release-rps/rps.zip'
    urllib.request.urlretrieve(data_url, 'rps.zip')
    local_file = 'rps.zip'
    zip_ref = zipfile.ZipFile(local_file, 'r')
    zip_ref.extractall('data/')
    zip_ref.close()

    #splitdata
    splitfolders.ratio('data/rps', output="data/rps-split", seed=1337, ratio=(.60, .40))

    TRAINING_DIR = "data/rps-split/train"
    training_datagen = ImageDataGenerator(rescale=1./255)

    # YOUR IMAGE SIZE SHOULD BE 150x150
    # Make sure you used "categorical"
    train_generator= training_datagen.flow_from_directory(directory=TRAINING_DIR,
                                                         batch_size=32,
                                                         class_mode='categorical',
                                                         target_size=(150, 150))
    VALIDATION_DIR = "data/rps-split/val"
    val_datagen = ImageDataGenerator(rescale=1./255)

    validation_generator = val_datagen.flow_from_directory(directory=VALIDATION_DIR,
                                                           batch_size=32,
                                                           class_mode='categorical',
                                                           target_size=(150, 150))

    #sequential
    model=tf.keras.models.Sequential([
    # YOUR CODE HERE, end with 3 Neuron Dense, activated by softmax

        tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),
        tf.keras.layers.MaxPooling2D(2, 2),

        tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2, 2),

        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2, 2),

        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(512, activation='relu'),
        tf.keras.layers.Dense(3, activation='softmax')
    ])
    #callback
    callback = MyCallback()
    #compiling
    model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001),
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    #fitting and checking
    model.fit(train_generator,
              epochs=10,
              verbose=1,
              validation_data=validation_generator,
              callbacks=callback)

    return model


# The code below is to save your model as a .h5 file.
# It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model=solution_B3()
    model.save("model_B3.h5")