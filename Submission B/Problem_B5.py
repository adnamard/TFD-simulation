# -*- coding: utf-8 -*-
"""Problem_B5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XPALYOCZ_9hAMqrNPu0zXyVLQ8_43tOC
"""

!pip install tensorflow
!pip install numpy
!pip install matplotlib

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import csv
import urllib

class MyCallbacks(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        if logs.get('val_mae') < 0.2:
            print('\n Training is done, criteria is filled')
            self.model.stop_training = True

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[1:]))
    return ds.batch(batch_size).prefetch(1)


def solution_B5():
    data_url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-max-temperatures.csv'
    urllib.request.urlretrieve(data_url, 'daily-max-temperatures.csv')

    time_step = []
    temps = []

    with open('daily-max-temperatures.csv') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        next(reader)
        step = 0
        for row in reader:
            temps.append(float(row[1])) # YOUR CODE HERE)
            time_step.append(step)  # YOUR CODE HERE)
            step=step + 1

    series = np.array(temps) # YOUR CODE HERE

    # Normalization Function. DO NOT CHANGE THIS CODE
    min=np.min(series)
    max=np.max(series)
    series -= min
    series /= max
    time=np.array(time_step)

    # DO NOT CHANGE THIS CODE
    split_time=2500

    time_train = time[:split_time] # YOUR CODE HERE
    x_train = series[:split_time] # YOUR CODE HERE
    time_valid = time[split_time:] # YOUR CODE HERE
    x_valid = series[split_time:] # YOUR CODE HERE

    # DO NOT CHANGE THIS CODE
    window_size=64
    batch_size=256
    shuffle_buffer_size=1000

    train_set=windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)
    print(train_set)
    print(x_train.shape)

    val_set = windowed_dataset(x_valid, window_size, batch_size, shuffle_buffer_size)

    #sequential
    model=tf.keras.models.Sequential([
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dense(64, activation='relu'),
        # YOUR CODE HERE.
        tf.keras.layers.Dense(1)
    ])

    #compilling
    model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae'])

    #callback
    callbacks = MyCallbacks()

    #fitting
    model.fit(train_set, epochs=500, callbacks=callbacks, validation_data=val_set)

    # YOUR CODE HERE
    return model


# The code below is to save your model as a .h5 file.
# It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model=solution_B5()
    model.save("model_B5.h5")